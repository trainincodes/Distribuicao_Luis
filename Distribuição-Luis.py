# -*- coding: utf-8 -*-
"""DISTRIBUIÇÃO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TqGMl5ysv8Dme-5TIkX8swbxo10EzBRm
"""

# De acordo com os conceitos de distribuição binomial utilizando as bibliotecas pandas e numpy, construa as seguintes relações:

# Criar uma função para simular (50) jogadas de um dado não viciado e demonstre os resultados obtidos;
# De acordo com o resultado anterior aplique o mesmo em um DataFrame e imprima um cabeçalho (head(10));
# Demonstre os resultados obtidos na função plot, de uma forma clara de observar a distribuição dos resultados;
# Demonstre a quantidade de valores pares e ímpares obtidos durante os número de jogadas (50);

import pandas as pd
import numpy as np

def simulate_dice_rolls(num_rolls):
    dice_rolls = np.random.randint(1, 7, size=num_rolls)
    return dice_rolls

num_rolls = 50
dice_results = simulate_dice_rolls(num_rolls)
df = pd.DataFrame({'Resultado do Dado': dice_results})

df.to_csv('jogadas.csv', index=False)

df = pd.read_csv('jogadas.csv')
print(df.head(10))

import matplotlib.pyplot as plt

plt.hist(df['Resultado do Dado'], bins=range(1, 8), edgecolor='black')
plt.xlabel('Resultado do Dado')
plt.ylabel('Frequência')
plt.title('Distribuição de Resultados de 50 Jogadas de Dado')
plt.show()

num_pares = (df['Resultado do Dado'] % 2 == 0).sum()
num_impares = (df['Resultado do Dado'] % 2 != 0).sum()

print(f'Quantidade de Valores Pares: {num_pares}')
print(f'Quantidade de Valores Ímpares: {num_impares}')